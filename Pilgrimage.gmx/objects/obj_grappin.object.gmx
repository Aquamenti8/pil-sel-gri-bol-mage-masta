<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_grappin</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialise variable
bras =          0
angle =         pi/4
aVelocity =     0
aAcceleration = 0
damping =       0.998
gravityy=       0.5
stopped =       false
tir =           false //phase instant, ou le joueur a tirer
alrTir =        -1
line_x =        -1
line_y =        -1
tractation =    false
alrTractation = -1 //phase courte de tractation vers la prise
balancier =     false
dir =           1

prise_id =      0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Colle player
if(!obj_player.grappinage){
    if (!obj_input.pause &amp;&amp; instance_exists(obj_player)){
        gamepad_set_axis_deadzone(0, 0.05)
        x=obj_player.x
        y=obj_player.y-32
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Tractation


if( tir = true ){        //si on tire
    alrTractation = 0.08*room_speed
    if(balancier){
        balancier = false
        alrTractation = 0
    }
    angletoprise = degtorad(90+point_direction(x,y,prise_id.x, prise_id.y))
    if(collision_line(x,y,line_x,line_y,obj_prise, true,true)!=prise_id){ //si le cable n'est pas tiré completement
        bras += 20
        line_x = x + bras*sin(angletoprise)
        line_y = y + bras*cos(angletoprise)
        if(bras&gt;300){   //si le bras est trop grand on annule
            tir =false
            alrTractation = -1
            obj_player.grappinage = false
            obj_player.nicolnigrav = false
        }
    }
    else{           //si le cable est tiré
        alrTractation = 0.08*room_speed  //Lance le compte a rebours tractation
        tractation = true
        tir = false
        angle = degtorad(90+point_direction(prise_id.x,prise_id.y, x, y))
        bras = distance_to_point(prise_id.x, prise_id.y)
    }
}


if(!tir &amp;&amp; tractation){   //si le compte a rebour est lancé
    if(alrTractation&gt;0){    //si le compte a rebour n'est pas terminé
        alrTractation -= 1
        bras-= bras*0.1
        if(bras &lt; 30) bras = 30
        x = prise_id.x + bras*sin(angle)
        y = prise_id.y + bras*cos(angle)
    }
    else{
        speed = 0
        altTractation = -1      
        balancier = true                        //on passe en mode balancier
        tractation = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Balancier et Input

if(balancier){
    aAcceleration = (-1 *gravityy / bras)*sin(angle)
    aVelocity += aAcceleration
    aVelocity *= damping
    angle += aVelocity
    
        //COLLISION PLATEFORME
    //si collision a la prochaine incrementation
    if(collision_line(prise_id.x + bras*sin(angle),prise_id.y + bras*cos(angle),prise_id.x,prise_id.y,obj_plateforme,false,true)!=noone){
        marge = 0       //set une marge
        while(collision_line(prise_id.x + (marge+1)*sin(angle),prise_id.y + (marge+1)*cos(angle),prise_id.x,prise_id.y,obj_plateforme,false,true)!=noone){
            //tant qu'on est pas juste avant la collision on incremente de 1
            x = prise_id.x + marge*sin(angle)
            y = prise_id.y + marge*cos(angle) 
            marge+=1
        }
        aVelocity = 0   //la vitesse devient nulle
    }
    else if(place_meeting(prise_id.x + bras*sin(angle),prise_id.y + bras*cos(angle),obj_plateforme)){
            marge = 0       //set une marge
        while(place_meeting(prise_id.x + (marge+1)*sin(angle),prise_id.y + (marge+1)*cos(angle),obj_plateforme)){
            //tant qu'on est pas juste avant la collision on incremente de 1
            x = prise_id.x + marge*sin(angle)
            y = prise_id.y + marge*cos(angle) 
            marge+=1
        }
        aVelocity = 0   //la vitesse devient nulle
    }
    else{  
        x = prise_id.x + bras*sin(angle)
        y = prise_id.y + bras*cos(angle)
    }

    
    dir = sign(aAcceleration)
    if(stopped){
        if(keyboard_check(ord("Q"))){
            dir = -1
        }
        if(keyboard_check(ord("D"))){
            dir = 1
        }
    }
    
    //si le perso va vers la gauche
    if(dir=1){
        //si on appuit sur A, on ralentit
            if(keyboard_check_pressed(ord("Q"))){
            aVelocity -= 0.02*dir
            if(dir=1 &amp;&amp; aVelocity &lt;0){  aVelocity=0}
            if(dir=-1 &amp;&amp; aVelocity &gt;0){  aVelocity=0}
        }
    
        //si on appuit sur E, on accelere
        if(keyboard_check_pressed(ord("D"))){
            aVelocity += 0.02*dir
            //(+ aVelocity petit, + bonus grand)
             
        }
    }
    //si le perso va vers la droite
    if(dir=-1){
        //si on appuit sur A, on accelere
        if(keyboard_check_pressed(ord("Q"))){
            aVelocity += 0.02*dir
            //(+ aVelocity petit, + bonus grand)
             
        }
        //si on appuit sur E, on ralentit
        if(keyboard_check_pressed(ord("D"))){
            aVelocity -= 0.02*dir
            if(dir=1 &amp;&amp; aVelocity &lt;0){  aVelocity=0}
            if(dir=-1 &amp;&amp; aVelocity &gt;0){  aVelocity=0}
        }
    }
    
    if(stopped){
        //Deplacement vertival de la boule
        if(keyboard_check(ord("Z")) &amp;&amp; bras&gt;20){
            bras-=3
        }
        if(keyboard_check(ord("S"))){
            bras+=3
        }
    }
    
    //Arret complet
    if(keyboard_check_pressed(ord("Q"))){
    damping = 0.998
    }
    if(keyboard_check_pressed(ord("D"))){
    damping = 0.998
    }
    
    distop = abs(x)-abs(prise_id.x)
    if( distop&lt;30 &amp;&amp; aVelocity&lt;0.02 &amp;&amp; distop!=0 &amp;&amp; aVelocity!=0){
        if(distop=0){
            damping = 0.998
        }
        else{damping -=0.0008}
    }
    if(distop=0 &amp;&amp; aVelocity=0){
        damping = 0.998
        aVelocity=0
        stopped=true
    }
    else{stopped=false}    
    

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Quit balancier
if(balancier){
    if(keyboard_check_pressed(vk_space)){
        balancier = false
        prise_id = 0
        obj_player.grappinage = false
        obj_player.nicolnigrav = false
    }
    if(place_meeting(x,y+3, obj_plateforme)){
        balancier = false
        prise_id = 0
        obj_player.grappinage = false
        obj_player.nicolnigrav = false
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_self()
if(tir or tractation){
    draw_line(x,y,line_x,line_y)
}
if(balancier){
    draw_line(x,y,prise_id.x,prise_id.y)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
