<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_arc</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// ini var

press=0

no_more_arrow=false
no_more_arrow_spawn=false
keep=false;
costed=false;

cooldown_arrow=0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///position et angle

if (!obj_input.pause){
    gamepad_set_axis_deadzone(0, 0.05)
    x=obj_player.x
    y=obj_player.y-32
    
    //Keyboard
    if(!obj_input.gamepad){
        image_angle = point_direction(x, y, mouse_x, mouse_y)
    }
    
    //gamepad
    else {
        var h_point = gamepad_axis_value(0, gp_axisrh);
        var v_point = gamepad_axis_value(0, gp_axisrv);
        var pdir = point_direction(0, 0, h_point, v_point);
        
        gamepad_set_axis_deadzone(0, 0.2)
        var h_point = gamepad_axis_value(0, gp_axisrh);
        var v_point = gamepad_axis_value(0, gp_axisrv);
        
        if (( h_point !=0) || (v_point !=0)) //si le stick est hors position de base
        {
            image_angle = pdir
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///shoot
if (!obj_input.pause){
    press = mouse_check_button_pressed(mb_left);
    press2 = gamepad_button_check_pressed(0,gp_shoulderr);
    released = mouse_check_button_released(mb_left);
    released2 = gamepad_button_check_released(0,gp_shoulderr);
    delete = mouse_check_button(mb_right);
    delete2 = gamepad_button_check(0,gp_shoulderrb)
    
    if (obj_player.s[1]-obj_player.arrow_cost&gt;0){
        if (press || press2 ) { //spawn arrow
            //attend le cooldown puis spawn l'arrow
            cooldown_arrow=1

        }
    }
    
    
    //rotate arrow   
    if (costed){ 
        if( (mouse_check_button(mb_left) || gamepad_button_check(0,gp_shoulderr)) &amp;&amp; !no_more_arrow  ){
            arrow_id.direction = image_angle;
            arrow_id.image_angle = arrow_id.direction;
            arrow_id.x =x
            arrow_id.y=y
            keep=true;
               
            if(delete||delete2) { //delete arrow
                keep=false;
                with (arrow_id)  instance_destroy()
                no_more_arrow=true
                costed=false;
            }       
        };
        
            //shoot arrow  
        if ((released || released2) &amp;&amp; !no_more_arrow ){
            if(arrow_id.shooted=false){
            arrow_id.speed=25
            arrow_id.shooted=true
            keep=false;
            costed=false;
            }
        }
    }
    
    if(keep=true){
        obj_player.stam_regen=false
    }
     else    obj_player.stam_regen=true
    if (no_more_arrow=true &amp;&amp; (released || released2)){
        no_more_arrow=false
    }
    
    //Spawn arrow
    if (cooldown_arrow&gt;0){
        if(!mouse_check_button(mb_left)&amp;&amp;!gamepad_button_check(0,gp_shoulderr)){ 
        cooldown_arrow=0}
        if (cooldown_arrow &gt;= 0.15*room_speed){
            arrow_id = instance_create(x,y,obj_fleche);
            arrow_id.direction = image_angle;
            arrow_id.image_angle = arrow_id.direction;
            arrow_id.shooted=false;
            obj_player.s_base[1]-=obj_player.arrow_cost
            costed=true
            
            cooldown_arrow=0
        }
        else cooldown_arrow+=1;
    }
    /*
    if (no_more_arrow_spawn=true &amp;&amp; (released || released2)){
        no_more_arrow_spawn=false
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
