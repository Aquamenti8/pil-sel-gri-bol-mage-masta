<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Charactéristiques personnage


//HP:0 STAM:1 ATQ:2 DEF:3 ATQ_M:4 DEF_M:5 SPD:6
 
//statut sans equipements, augmente en montant de niveau
s_base[0]=10
s_base[1]=150
s_base[2]=2
s_base[3]=2
s_base[4]=1
s_base[5]=1
s_base[6]=3

//statut des equipements
s_eq[0]=0
s_eq[1]=0
s_eq[2]=0
s_eq[3]=0
s_eq[4]=0
s_eq[5]=0
s_eq[6]=0

//statut du personnage (base + equipement)
for(i=0;i&lt;array_length_1d(s_base);i+=1){
    s[i]=s_base[i]+s_eq[i]
}

actual_hp=5         //hp actuels du joueur (c'est la que se passent les degats)
actual_stamina=50   //stamina actuelle (la staplique les pertes de stamina
stamina_max=150     //!!! stamina max, obsolette en principe !!!
sprint_spd_bonus=4  //bonus de vitesse du sprint en pixel
dash_spd_bonus=50   //bonus de vitesse du dash en pixel
dash_cost=50        //stamina cost du dash
dash_duration=5;    //frame lenght du dash
sprint_cost=1       //stamina cost par frame du sprint
arrow_cost=20       //stamina cost par fleche*
stamina_recover=1   //stamina recovery par frame

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Recupere hsp et vsp si player existe
if(instance_exists(obj_player)){
    hsp = obj_player.hsp
    vsp = obj_player.vsp
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update charactéristiques

//HP:0 STAM:1 ATQ:2 DEF:3 ATQ_M:4 DEF_M:5 SPD:6 

for(i=0;i&lt;array_length_1d(s_base);i+=1){
    s[i]=s_base[i]+s_eq[i]
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw hp bar, stamina_bar,... (UI)
bar_width = view_wview*0.2
bar_height = view_hview*0.02

draw_text(0.1*view_wview,(0.1-0.02)*view_hview,"HP")
draw_text(0.2*view_wview,(0.1-0.02)*view_hview,string(actual_hp)+'/'+string(s[0]))
draw_rectangle(0.1*view_wview,0.1*view_hview,0.1*view_wview+bar_width,0.1*view_hview+bar_height,true)
draw_rectangle(0.1*view_wview,0.1*view_hview,0.1*view_wview+ actual_hp / s[0] *bar_width,0.1*view_hview+bar_height,false)

draw_text(0.1*view_wview,(0.15-0.02)*view_hview,"Stamina")
draw_rectangle(0.1*view_wview,0.15*view_hview,0.1*view_wview+bar_width,0.15*view_hview+bar_height,true)
draw_rectangle(0.1*view_wview,0.15*view_hview,0.1*view_wview+(actual_stamina/s[1])*bar_width,0.15*view_hview+bar_height,false)


//draw 4 slot for objects, their position change depending if we use keyboard or gamepad

if(obj_input.gamepad=false){ //keyboard
    xslot=view_xview+view_wview/10
    yslot=view_yview+view_hview/4*2.5
    hslot=60
    wslot=60  
    for (i=0; i&lt;4 ; i+= 1){ //check the slots
        draw_rectangle(xslot+hslot*i,yslot+hslot*i,xslot+wslot*(i+1),yslot+hslot*(i+1),true);
        draw_text(xslot+hslot*i,yslot+hslot*i+hslot-15,i+1)
        
        //draw the sprite of the object in the slot
        name = obj_menu.eq_item[i] //return the name object
        if(name !=0 ) for ( j=0; j&lt; array_height_2d(obj_menu.inv_all); j+=1){   //check inv_all, find the same name, and return the sprite name [i,4]
            if(obj_menu.inv_all[j,0]=name){
                draw_sprite(obj_menu.inv_all[j,4],0,xslot,yslot)
                //draw the number of object in the slot
                draw_text(xslot,yslot,obj_menu.inv_all[j,3])
            }
        }  
    }
}
else{ //gamepad
    xslot=view_xview+view_wview/10
    yslot=view_yview+view_hview/4*2.5
    cslot=60
    //left slot
    draw_rectangle(xslot,yslot,xslot+cslot,yslot+cslot,true);
    draw_text(xslot,yslot+cslot-15,"gauche")
    name = obj_menu.eq_item[3] //return the name of the object
    if(name !=0 ) for ( j=0; j&lt; array_height_2d(obj_menu.inv_all); j+=1){
        if(obj_menu.inv_all[j,0]=name){
            draw_sprite(obj_menu.inv_all[j,4],0,xslot,yslot)
            draw_text(xslot,yslot,obj_menu.inv_all[j,3])
        }
    }
    //upper slot
    draw_rectangle(xslot+cslot,yslot-cslot,xslot+cslot*2,yslot,true);
    draw_text(xslot+cslot,yslot-cslot+cslot-15,"haut")
    name = obj_menu.eq_item[0] //return the name of the object
    if(name !=0 ) for ( j=0; j&lt; array_height_2d(obj_menu.inv_all); j+=1){
        if(obj_menu.inv_all[j,0]=name){
            draw_sprite(obj_menu.inv_all[j,4],0,xslot+cslot,yslot-cslot)
            draw_text(xslot+cslot,yslot-cslot,obj_menu.inv_all[j,3])
        }
    }
    //right slot
    draw_rectangle(xslot+cslot*2,yslot,xslot+cslot*3,yslot+cslot,true);
    draw_text(xslot+cslot*2,yslot+cslot-15,"droit")
    name = obj_menu.eq_item[1] //return the name of the object
    if(name !=0 ) for ( j=0; j&lt; array_height_2d(obj_menu.inv_all); j+=1){
        if(obj_menu.inv_all[j,0]=name){
            draw_sprite(obj_menu.inv_all[j,4],0,xslot+cslot*2,yslot)
            draw_text(xslot+cslot*2,yslot,obj_menu.inv_all[j,3])
        }
    }
    //lower slot
    draw_rectangle(xslot+cslot,yslot+cslot,xslot+cslot*2,yslot+cslot*2,true);
    draw_text(xslot+cslot,yslot+cslot+cslot-15,"bas")
        name = obj_menu.eq_item[2] //return the name of the object
    if(name !=0 ) for ( j=0; j&lt; array_height_2d(obj_menu.inv_all); j+=1){
        if(obj_menu.inv_all[j,0]=name){
            draw_sprite(obj_menu.inv_all[j,4],0,xslot+cslot,yslot+cslot)
            draw_text(xslot+cslot,yslot+cslot,obj_menu.inv_all[j,3])
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
