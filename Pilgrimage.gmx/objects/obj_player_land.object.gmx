<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_player_R</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>obj_player</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialisation des variables

input_locked=false;
gamepad_set_axis_deadzone(0,0.7);

//Variables globales qui peuvent etre influencer par l'equipement

accrochage =false;
nicolnigrav=false;
snap=0;

spd_bonus=0;
jump_bonus=0;

//image_alpha = 0.0005;
mirror = FACE_RIGHT;
    
hsp = 0;
vsp = 0;

key_down = 0;
key_A = 0;
dash = 0;


up_off=false
A_off=false
QD_off=false
locked_platform=0;
stam_regen=true;

y_depart=-1
y_diff=0


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Charactéristiques personnage


//HP:0 STAM:1 ATQ:2 DEF:3 ATQ_M:4 DEF_M:5 SPD:6 
s_base[0]=10
s_base[1]=100
s_base[2]=2
s_base[3]=2
s_base[4]=1
s_base[5]=1
s_base[6]=3

s_eq[0]=0
s_eq[1]=0
s_eq[2]=0
s_eq[3]=0
s_eq[4]=0
s_eq[5]=0
s_eq[6]=0

for(i=0;i&lt;array_length_1d(s_base);i+=1){
    s[i]=s_base[i]+s_eq[i]
}

actual_hp=5



stamina_max=150

sprint_spd_bonus=4
dash_spd_bonus=50
dash_cost=50
sprint_cost=1
arrow_cost=20
stamina_recover=1


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic movements, collision, gravité


if (!obj_input.pause){

    if(up_off=true &amp;&amp; keyboard_check_released(ord("Z"))){
        up_off=false
    }
    if(up_off=true &amp;&amp; gamepad_button_check_released(0,gp_face1)){
        up_off=false
    }
    
    if(nicolnigrav=false){
        if(input_locked=false){
        
            //Get the player's input
        if (obj_input.gamepad=false)key_right = keyboard_check(ord("D"));
        else {if(gamepad_axis_value(0,gp_axislh)&gt;0) key_right =1;
            else key_right=0
            }
        
        if (obj_input.gamepad=false)key_left = -keyboard_check(ord("Q"));
        else {if(gamepad_axis_value(0,gp_axislh)&lt;0) key_left =-1;
            else key_left=0
            }
            key_down = keyboard_check(ord("S"));
            
        if (obj_input.gamepad=false) key_jump = keyboard_check(ord("Z"));
        else {if gamepad_button_check(0,gp_face1)key_jump=1; 
            else key_jump=0
            }
            
            
            //React to inputs
            move = key_left + key_right;
            if(QD_off=false){
            hsp = move*(P_SPEED+spd_bonus);
            }
            else hsp=0
            
            //Mirroring
            if (move&lt;0) {
                mirror = FACE_LEFT
                sprite_index = sp_player_L
             }
            if (move&gt;0) {
                mirror = FACE_RIGHT
                sprite_index = sp_player_R
            }
            
            // Fall
            if (!place_meeting(x,y+1,obj_plateforme)){
                instance_change(obj_player_air,true)
            }
            //JUMP 
            if (!up_off &amp;&amp; key_jump ){
                instance_change(obj_player_air,true)
                vsp=-P_JUMP_POWER
            }
        }
            
        
        
        //Horizontal Collision
        if (place_meeting(x+hsp,y,obj_plateforme))
        {
            while(!place_meeting(x+sign(hsp),y,obj_plateforme)){
                x += sign(hsp);
            }
            hsp = 0;
        }
        x += hsp;  
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change to obj_player dash
if(keyboard_check_pressed(vk_lshift)||gamepad_button_check_pressed(0,gp_face2)){
    instance_change(obj_player_dash, true)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Accrochage
if(QD_off &amp;&amp; sol) QD_off=false;
if(locked_platform!=0 &amp;&amp; sol) locked_platform=0;

if (!obj_input.pause){
    //si en l'air et au contact
    if (place_meeting(x+mirror,y,obj_plateforme)) &amp;&amp; (!place_meeting(x,y+vsp,obj_plateforme)){
        //recupere l'id de l'obj
        id_p = instance_place(x+mirror , y, obj_plateforme);
        if(locked_platform!=id_p){
            //recupere la position de l'obj
            id_x= id_p.x
            //calcule la position des points d'accroche
            x_1 = id_p.x ;
            y_1 = id_p.y;
            x_2 = id_p.x+id_p.sprite_width;
            y_2 = id_p.y;
            //verifie la proximité des points d'accroche
            if( abs( (x+sprite_width/2)-x_1)&lt;10 &amp;&amp; abs((y-sprite_height)-y_1) &lt;40 ) { //si on est proche du point 1
                nicolnigrav=true
                x=x_1-sprite_width/2;
                y=y_1+sprite_height;
                accrochage=true;
                snap=1;
                y_depart=y
            }
            else if( abs((x-sprite_width/2)-x_2)&lt;10 &amp;&amp; abs((y-sprite_height)-y_2) &lt;40 ){ //si proche point 2
                nicolnigrav=true
                x=x_2+sprite_width/2;
                y=y_2+sprite_height;
                accrochage=true;
                snap=2
                y_depart=y
            }
        }
    }
    
    if (!obj_input.gamepad){
        klimb_key = keyboard_check(ord("Z"))
        fall_key = keyboard_check(ord("A"))
    }
    else{
        klimb_key = gamepad_button_check_pressed(0,gp_face1)
        fall_key = gamepad_button_check_pressed(0,gp_face2)
    }
    
    if ( !up_off &amp;&amp; accrochage &amp;&amp; klimb_key ){
        if(snap=1){
        y=y_1-1
        x=x_1+sprite_width/2
        }
        if(snap=2){
        y=y_2-1
        x=x_2-sprite_width/2
        }
        accrochage=false;
        nicolnigrav=false;
        up_off=true;   
    }
    //DECCROCHAGE
    if ( !up_off &amp;&amp; accrochage &amp;&amp; fall_key){
        if(snap=1){
        x-=1
        }
        if(snap=2){
        x+=1
        }
        accrochage=false;
        nicolnigrav=false;
        A_off=true;  
        locked_platform = id_p;
     //   QD_off=true
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stamina control
if (!obj_input.pause){
    if(spd_bonus=sprint_spd_bonus  &amp;&amp; hsp!=0){
        s_base[1]-=sprint_cost
    }
    if(spd_bonus=dash_spd_bonus){
        s_base[1]-=dash_cost/dash_duration
    }
    
    if( spd_bonus=0 &amp;&amp; s_base[1]&lt;stamina_max &amp;&amp; stam_regen){
        s_base[1]+=stamina_recover
    }
    else if (hsp=0 &amp;&amp; stam_regen &amp;&amp; s_base[1]&lt;stamina_max){
        s_base[1]+=stamina_recover
    }
    
    if(s_base[1]&lt;0) s_base[1]=0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// degats de chute
if (!obj_input.pause){
    //Sauvegarde la hauteur a laquelle on quitte le sol
    if (y_depart =-1 &amp;&amp; !place_meeting(x,y+1,obj_plateforme)){
        y_depart=y
    }
    
    //Sauvegarde la hauteur sur laquelle on atterit, fait la difference
    if (y_depart!=-1 &amp;&amp; place_meeting(x,y+1,obj_plateforme)){
        y_diff = y-y_depart
        y_depart=-1
    }
    
    //Retire des points de vie celon la distance parcourue
    if(y_diff &gt; 100) {
        actual_hp -= 1+((y_diff-100) div 100)
        y_diff=0
    }
    else    y_diff=0
    
    if (actual_hp &lt;= 0){
        room_restart()
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update charactéristiques

//HP:0 STAM:1 ATQ:2 DEF:3 ATQ_M:4 DEF_M:5 SPD:6 

for(i=0;i&lt;array_length_1d(s_base);i+=1){
    s[i]=s_base[i]+s_eq[i]
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug

draw_self();
draw_set_colour(c_black);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw hp bar, stamina_bar,... (UI)

draw_set_colour(c_black);
draw_text(0.1*view_wview,0.1*view_hview-20,"HP")
draw_text(0.2*view_wview,0.1*view_hview-20,string(actual_hp)+'/'+string(s[0]))
draw_rectangle(0.1*view_wview,0.1*view_hview,0.1*view_wview+100,0.1*view_hview+10,true)
draw_rectangle(0.1*view_wview,0.1*view_hview,0.1*view_wview+ actual_hp / s[0] *100,0.1*view_hview+10,false)

draw_text(0.1*view_wview,0.2*view_hview-20,"Stamina")
draw_rectangle(0.1*view_wview,0.2*view_hview,0.1*view_wview+100,0.2*view_hview+10,true)
draw_rectangle(0.1*view_wview,0.2*view_hview,0.1*view_wview+(s[1]/stamina_max)*100,0.2*view_hview+10,false)

//draw 4slot pour les objets , leur position change si on est en keyboard ou en gamepad

if(obj_input.gamepad=false){ //pour keyboard
    xslot=view_xview+view_wview/10
    yslot=view_yview+view_hview/4*2.5
    hslot=60
    wslot=60  
    for (i=0; i&lt;4 ; i+= 1){ //parcours les slots
        draw_rectangle(xslot+hslot*i,yslot+hslot*i,xslot+wslot*(i+1),yslot+hslot*(i+1),true);
        draw_text(xslot+hslot*i,yslot+hslot*i+hslot-15,i+1)
        
        //draw le sprite de l'objet dans le slot
        name = obj_menu.eq_item[i] //recup le nom de l'objet
        if(name !=0 ) for ( j=0; j&lt; array_height_2d(obj_menu.inv_all); j+=1){   //parcours inv_all, trouve le meme nom, recupere le nom du sprite [i,4]
            if(obj_menu.inv_all[j,0]=name){
                draw_sprite(obj_menu.inv_all[j,4],0,xslot,yslot)
                //draw le nombre d'objets dans le slot
                draw_text(xslot,yslot,obj_menu.inv_all[j,3])
            }
        }  
    }
}
else{ //pour gamepad
    xslot=view_xview+view_wview/10
    yslot=view_yview+view_hview/4*2.5
    cslot=60
    //slot gauche
    draw_rectangle(xslot,yslot,xslot+cslot,yslot+cslot,true);
    draw_text(xslot,yslot+cslot-15,"gauche")
    name = obj_menu.eq_item[3] //recup le nom de l'objet
    if(name !=0 ) for ( j=0; j&lt; array_height_2d(obj_menu.inv_all); j+=1){
        if(obj_menu.inv_all[j,0]=name){
            draw_sprite(obj_menu.inv_all[j,4],0,xslot,yslot)
            draw_text(xslot,yslot,obj_menu.inv_all[j,3])
        }
    }
    //slot haut
    draw_rectangle(xslot+cslot,yslot-cslot,xslot+cslot*2,yslot,true);
    draw_text(xslot+cslot,yslot-cslot+cslot-15,"haut")
    name = obj_menu.eq_item[0] //recup le nom de l'objet
    if(name !=0 ) for ( j=0; j&lt; array_height_2d(obj_menu.inv_all); j+=1){
        if(obj_menu.inv_all[j,0]=name){
            draw_sprite(obj_menu.inv_all[j,4],0,xslot+cslot,yslot-cslot)
            draw_text(xslot+cslot,yslot-cslot,obj_menu.inv_all[j,3])
        }
    }
    //slot droit
    draw_rectangle(xslot+cslot*2,yslot,xslot+cslot*3,yslot+cslot,true);
    draw_text(xslot+cslot*2,yslot+cslot-15,"droit")
    name = obj_menu.eq_item[1] //recup le nom de l'objet
    if(name !=0 ) for ( j=0; j&lt; array_height_2d(obj_menu.inv_all); j+=1){
        if(obj_menu.inv_all[j,0]=name){
            draw_sprite(obj_menu.inv_all[j,4],0,xslot+cslot*2,yslot)
            draw_text(xslot+cslot*2,yslot,obj_menu.inv_all[j,3])
        }
    }
    //slot bas
    draw_rectangle(xslot+cslot,yslot+cslot,xslot+cslot*2,yslot+cslot*2,true);
    draw_text(xslot+cslot,yslot+cslot+cslot-15,"bas")
        name = obj_menu.eq_item[2] //recup le nom de l'objet
    if(name !=0 ) for ( j=0; j&lt; array_height_2d(obj_menu.inv_all); j+=1){
        if(obj_menu.inv_all[j,0]=name){
            draw_sprite(obj_menu.inv_all[j,4],0,xslot+cslot,yslot+cslot)
            draw_text(xslot+cslot,yslot+cslot,obj_menu.inv_all[j,3])
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
