<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_player_land</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Accrochage

if (!obj_input.pause){
    //si en l'air et au contact
    if (place_meeting(x+mirror,y,obj_plateforme)) &amp;&amp; (!place_meeting(x,y+vsp,obj_plateforme)){
        //recupere l'id de l'obj
        id_p = instance_place(x+mirror , y, obj_plateforme);
        if(locked_platform!=id_p){
            //recupere la position de l'obj
            id_x= id_p.x
            //calcule la position des points d'accroche
            x_1 = id_p.x ;
            y_1 = id_p.y;
            x_2 = id_p.x+id_p.sprite_width;
            y_2 = id_p.y;
            //verifie la proximit√© des points d'accroche
            if( abs( (x+sprite_width/2)-x_1)&lt;10 &amp;&amp; abs((y-sprite_height)-y_1) &lt;40 ) { //si on est proche du point 1
                nicolnigrav=true
                x=x_1-sprite_width/2;
                y=y_1+sprite_height;
                accrochage=true;
                snap=1;
                y_depart=y
            }
            else if( abs((x-sprite_width/2)-x_2)&lt;10 &amp;&amp; abs((y-sprite_height)-y_2) &lt;40 ){ //si proche point 2
                nicolnigrav=true
                x=x_2+sprite_width/2;
                y=y_2+sprite_height;
                accrochage=true;
                snap=2
                y_depart=y
            }
        }
    }
    
    if (!obj_input.gamepad){
        klimb_key = keyboard_check(ord("Z"))
        fall_key = keyboard_check(ord("A"))
    }
    else{
        klimb_key = gamepad_button_check_pressed(0,gp_face1)
        fall_key = gamepad_button_check_pressed(0,gp_face2)
    }
    
    if ( !up_off &amp;&amp; accrochage &amp;&amp; klimb_key ){
        if(snap=1){
        y=y_1-1
        x=x_1+sprite_width/2
        }
        if(snap=2){
        y=y_2-1
        x=x_2-sprite_width/2
        }
        accrochage=false;
        nicolnigrav=false;
        up_off=true;   
    }
    //DECCROCHAGE
    if ( !up_off &amp;&amp; accrochage &amp;&amp; fall_key){
        if(snap=1){
        x-=1
        }
        if(snap=2){
        x+=1
        }
        accrochage=false;
        nicolnigrav=false;
        A_off=true;  
        locked_platform = id_p;
     //   QD_off=true
    }

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
