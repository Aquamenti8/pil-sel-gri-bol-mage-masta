<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_player_R</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialisation des variables

input_locked=false;
gamepad_set_axis_deadzone(0,0.7);

//Variables globales qui peuvent etre influencer par l'equipement

accrochage =false;
nicolnigrav=false; //desactive collision et gravité
snap=0;


mirror = FACE_RIGHT;   
hsp = 0;
vsp = 0;

key_down = 0;
key_up = 0;
key_A = 0;

dash = 0;

spd_bonus=0;
jump_bonus=0;

up_off=false
A_off=false
QD_off=false
locked_platform=0;
stam_regen=true;

y_depart=-1
y_diff=0

onladder = false
grappinage = false
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///player_state
player_state = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic movements, collision, gravité


if (!obj_input.pause){//Pas de mouvement si le jeu est en pause

    //RECUPERATION DES INPUT CLAVIER ET GAMEPAD
    if(up_off=true &amp;&amp; keyboard_check_released(vk_space)){
        up_off=false
    }
    
    if(up_off=true &amp;&amp; gamepad_button_check_released(0,gp_face1)){
        up_off=false
    }
    
             //Get the player's input   
    if(input_locked=false){       
        if (obj_input.gamepad=false)key_right = keyboard_check(ord("D"));
        else {if(gamepad_axis_value(0,gp_axislh)&gt;0) key_right =1;
            else key_right=0
            }
        
        if (obj_input.gamepad=false)key_left = -keyboard_check(ord("Q"));
        else {if(gamepad_axis_value(0,gp_axislh)&lt;0) key_left =-1;
            else key_left=0
            }
            key_down = keyboard_check(ord("S"));
            
        if (obj_input.gamepad=false) key_jump = keyboard_check(vk_space);
        else {if gamepad_button_check(0,gp_face1)key_jump=1; 
            else key_jump=0
            }
        } 
    if(nicolnigrav=false){ //si la gravité et la collision sont activée (si on est pas accroché par exemple)                          
        //React to inputs
        move = key_left + key_right;
        if(QD_off=false){
        hsp = move*(P_SPEED+spd_bonus);
        }
        else hsp=0
        if (vsp &lt; 10) vsp += GRAV;
        
        //Mirroring
        if (move&lt;0) {
            mirror = FACE_LEFT
            sprite_index = sp_player_L
         }
        if (move&gt;0) {
            mirror = FACE_RIGHT
            sprite_index = sp_player_R
        }
        
        //jump?
        if (place_meeting(x,y+1,obj_plateforme) or place_meeting(x,y+1,obj_onewayplateform))
        {  
            if (!up_off &amp;&amp; key_jump ){
            vsp = -(P_JUMP_POWER+jump_bonus);
            up_off=true
            }
        }    
        
        
        //Horizontal Collision
        if (place_meeting(x+hsp,y,obj_plateforme))
        {
            while(!place_meeting(x+sign(hsp),y,obj_plateforme)){
                x += sign(hsp);
            }
            hsp = 0;
        }
        x += hsp;  
        //Vertical Collision
        
            //plateforme dures
        if (place_meeting(x,y+vsp,obj_plateforme))
        {
            while(!place_meeting(x,y+sign(vsp),obj_plateforme)){
                y += sign(vsp);
            }
            vsp = 0;
        }
            //plateformes traversable par le bas
        if (vsp&gt;0 &amp;&amp; place_meeting(x,y+vsp,obj_onewayplateform))&amp;&amp;!place_meeting(x,y,obj_onewayplateform){
            while(!place_meeting(x,y+sign(vsp),obj_onewayplateform)){
                y += sign(vsp);
            }
            vsp = 0;
        }
        y += vsp;
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Accrochage

if (!obj_input.pause &amp;&amp; !onladder){
    //si en l'air et au contact
    if (place_meeting(x+mirror,y,obj_plateforme)) &amp;&amp; (!place_meeting(x,y+vsp,obj_plateforme)){
        //recupere l'id de l'obj
        id_p = instance_place(x+mirror , y, obj_plateforme);
        if(locked_platform!=id_p){
            //recupere la position de l'obj
            id_x= id_p.x
            //calcule la position des points d'accroche
            x_1 = id_p.x ;
            y_1 = id_p.y;
            x_2 = id_p.x+id_p.sprite_width;
            y_2 = id_p.y;
            //verifie la proximité des points d'accroche
            if( abs( (x+sprite_width/2)-x_1)&lt;10 &amp;&amp; abs((y-sprite_height)-y_1) &lt;40 ) { //si on est proche du point 1
                nicolnigrav=true
                x=x_1-sprite_width/2;
                y=y_1+sprite_height;
                accrochage=true;
                snap=1;
                y_depart=y
            }
            else if( abs((x-sprite_width/2)-x_2)&lt;10 &amp;&amp; abs((y-sprite_height)-y_2) &lt;40 ){ //si proche point 2
                nicolnigrav=true
                x=x_2+sprite_width/2;
                y=y_2+sprite_height;
                accrochage=true;
                snap=2
                y_depart=y
            }
        }
    }
    
    if (!obj_input.gamepad){
        klimb_key = keyboard_check(ord("Z"))
        fall_key = keyboard_check(ord("A"))
    }
    else{
        klimb_key = gamepad_button_check_pressed(0,gp_face1)
        fall_key = gamepad_button_check_pressed(0,gp_face2)
    }
    
    if ( !up_off &amp;&amp; accrochage &amp;&amp; klimb_key ){
        if(snap=1){
        y=y_1-1
        x=x_1+sprite_width/2
        }
        if(snap=2){
        y=y_2-1
        x=x_2-sprite_width/2
        }
        accrochage=false;
        nicolnigrav=false;
        if(obj_input.gamepad=false){//sur keyboard
            up_off=false;  
        } 
        else up_off=true;
    }
    //DECCROCHAGE
    if ( !up_off &amp;&amp; accrochage &amp;&amp; fall_key){
        if(snap=1){
        x-=1
        }
        if(snap=2){
        x+=1
        }
        accrochage=false;
        nicolnigrav=false;
        A_off=true;  
        locked_platform = id_p;
     //   QD_off=true
    }

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stamina control

if (!obj_input.pause){
    //si on sprint
    if(spd_bonus = obj_player_stat.sprint_spd_bonus  &amp;&amp; hsp!=0){
        //on perd de la stamina chaque frame
        obj_player_stat.actual_stamina -= obj_player_stat.sprint_cost
    }
    //si on dash
    if(spd_bonus = obj_player_stat.dash_spd_bonus){
        //on perd de la stamina chaque frame (jusqu'a ce que la stam perdu soit egale a dash cost)
        obj_player_stat.actual_stamina -= obj_player_stat.dash_cost/obj_player_stat.dash_duration
    }
    
    //si on ne sprint pas et qu'on a pas toute sa stamina
    if( spd_bonus=0 &amp;&amp; obj_player_stat.actual_stamina&lt;obj_player_stat.s_base[1] &amp;&amp; stam_regen){
        //on regagne de la stamina chaque frame
        obj_player_stat.actual_stamina += obj_player_stat.stamina_recover
    }
    
    //si la stamina est negative, stamina revient a 0
    if(obj_player_stat.actual_stamina&lt;0) obj_player_stat.actual_stamina=0
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// degats de chute et MORT
if (!obj_input.pause){
    //Sauvegarde la hauteur a laquelle on quitte le sol
    if (y_depart =-1 &amp;&amp; !place_meeting(x,y+1,obj_plateforme) &amp;&amp; !onladder){
        y_depart=y
    }
    
    //Sauvegarde la hauteur sur laquelle on atterit, fait la difference
    if (y_depart!=-1 &amp;&amp; place_meeting(x,y+1,obj_plateforme)){
        y_diff = y-y_depart
        y_depart=-1
    }
    
    //Retire des points de vie celon la distance parcourue
    if(y_diff &gt; 100) {
        obj_player_stat.actual_hp -= 1+((y_diff-100) div 100)
        y_diff=0
    }
    else    y_diff=0
    
    if (obj_player_stat.actual_hp &lt;= 0){
        game_restart()
    }
}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprint/Dash

if (!obj_input.pause){
    sol = place_meeting(x,y+1,obj_plateforme)
    
    if(input_locked=false){
    
        //Si A enfoncé et si player sur sol, augmente la vitesse de deplacement
    if (!obj_input.gamepad){
        key_A_p = keyboard_check_pressed(vk_lshift);
    }
    else{ key_A_p = gamepad_button_check_pressed(0,gp_face2);}
        //key_A est a la fois un checker et un compteur, !=0 -&amp;gt; bonusvitesse 
        if (key_A!=0)key_A+=1;
        if (key_A_p &amp;&amp; sol ) key_A=1;
        if (A_off) key_A=0;
        
        if (obj_player_stat.actual_stamina-obj_player_stat.sprint_cost&lt;0) key_A =0
        
        if (key_A&gt;10 &amp;&amp; sol){spd_bonus = obj_player_stat.sprint_spd_bonus;jump_bonus=obj_player_stat.sprint_spd_bonus}
        if (key_A&gt;10 &amp;&amp; !sol){spd_bonus=obj_player_stat.sprint_spd_bonus;jump_bonus=obj_player_stat.sprint_spd_bonus}
        if (key_A=0){spd_bonus=0;jump_bonus=0}
        
         //si on relache A:
        if(keyboard_check_released(vk_lshift) || (gamepad_button_check_released(0,gp_face2))){
            if(key_A&lt;10 &amp;&amp; key_A!=0 &amp;&amp; (obj_player_stat.actual_stamina-obj_player_stat.dash_cost&gt;0)){ //Dash
            dash=1
            key_A =0;
            }
            else {
            key_A =0;
            }
            A_off=false;
        }
    
    }
    //dash
        
    if(dash&gt;0){
        spd_bonus=obj_player_stat.dash_spd_bonus;
        input_locked=true;
        dash+=1
        hsp = mirror*(P_SPEED+spd_bonus)
    
    }
    if(dash&gt;obj_player_stat.dash_duration) {
        dash=0; 
        spd_bonus=0;
        input_locked=false;   
    }
    
    
    if(QD_off &amp;&amp; sol) QD_off=false;
    if(locked_platform!=0 &amp;&amp; sol) locked_platform=0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Echelle

if(!obj_input.pause){
    //Get the player's input
    if (obj_input.gamepad=false) key_down = keyboard_check(ord("S"));
    else {if gamepad_button_check(0,gp_padd)key_down=1; 
        else key_down=0
        }   
    if (obj_input.gamepad=false) key_up = keyboard_check(ord("Z"));
    else {if gamepad_button_check(0,gp_padu)key_up=1; 
        else key_up=0
        }
    
    //LADDER SYSTEM
    
    //MONTER A L'ECHELLE?
    idladder = instance_place(x,y,obj_echelle) //return noone si yen a pas
    if (idladder!= noone &amp;&amp; !onladder &amp;&amp; !up_off &amp;&amp;key_jump=0){ //(ou place_meeting)si on est devant l'echelle
        if(key_up=1){//si on appuit vers le Haut
            onladder = true //on passe en mode echelle
            y -= 20;        //on quitte un peu le sol
            x = idladder.x  // et on se snap a l'echelle
        }
    }
    //DESCENDRE A L'ECHELLE?
    idladder = instance_place(x,y+2,obj_echelle) //return noone si yen a pas
    if (idladder!= noone &amp;&amp;instance_place(x,y,obj_echelle)=noone&amp;&amp; !onladder){ //si on est au dessus d'une echelle et que pour le moment on en touche pas
        if(key_down=1){//si on appuit vers le Haut
            onladder = true //on passe en mode echelle
            y += 20;        //on quitte un peu le sol
            x = idladder.x  // et on se snap a l'echelle
        }
    }
    
    if(onladder =true){     //si on est en mode echelle
    
        nicolnigrav =true       //nicolnigrav est activé
        if(key_up=1){           //si on appui sur Haut
            if(idladder = noone){   //Si on est tout en haut de l'echelle
                y-=10                   //on prend une petite impulsion vers le haut pour eviter les collisions
                onladder = false        //on sort de echelle mode
                nicolnigrav = false     //nicolnigrav est desactivé
                }
            else{                   //Sinon 
            y-=5                        //on monte un peu de l'echelle
            }
        }
        if(key_down=1 &amp;&amp; idladder!=noone){        //si on appui sur Bas
            if(y &gt;= idladder.y+idladder.sprite_height){//si on est tout en bas de l'echelle
                y-=5
                onladder = false        // on sort de echelle mode
                nicolnigrav =false      //nicolnigrav est desactivé
                }
            else{                   //sinon
            y+=5                        //on descend un peu l'echelle
            }
        }
        if(key_jump=1 &amp;&amp; !up_off){
                vsp = -(P_JUMP_POWER+jump_bonus);
                up_off=true
                onladder = false        // on sort de echelle mode
                nicolnigrav = false      //nicolnigrav est desactivé
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Grappinage

if(grappinage){
    nicolnigrav = true
    x = obj_grappin.x
    y = obj_grappin.y+32
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug

draw_self();
/*
draw_text(x,y-100,instance_count);
draw_text(x,y-115,instance_number(obj_arc));
draw_text(x,y-130,instance_number(obj_fleche));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
