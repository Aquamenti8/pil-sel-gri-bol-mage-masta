<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialisation des variables

input_locked=false;
gamepad_set_axis_deadzone(0,0.7);

//Variables globales qui peuvent etre influencer par l'equipement
global.grav = 0.3;
global.jumpspeed = 6;
global.movespeed = 3;

accrochage =false;
nicolnigrav=false;
snap=0;

spd_bonus=0;
jump_bonus=0;

//image_alpha = 0.0005;
    global.playermirrored = 1
    
hsp = 0;
vsp = 0;

key_down = 0;
key_A = 0;
dash = 0;

dash_duration=5;

up_off=false

//chara = instance_create(x,y,obj_chara);
//chara.animation = sp_chara;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Basic movements, collision, gravité

if(up_off=true &amp;&amp; keyboard_check_released(ord("Z"))){
    up_off=false
}
if(up_off=true &amp;&amp; gamepad_button_check_released(0,gp_face1)){
    up_off=false
}

if(nicolnigrav=false){
    if(input_locked=false){
    
        //Get the player's input
        key_right = keyboard_check(ord("D"));
    if(gamepad_axis_value(0,gp_axislh)&gt;0) key_right =1;
        key_left = -keyboard_check(ord("Q"));
    if(gamepad_axis_value(0,gp_axislh)&lt;0) key_left =-1;
        key_down = keyboard_check(ord("S"));
        key_jump = keyboard_check(ord("Z"));
        if gamepad_button_check(0,gp_face1)key_jump=1; 
        
        
        //React to inputs
        move = key_left + key_right;
        hsp = move*(global.movespeed+spd_bonus);
        if (vsp &lt; 10) vsp += global.grav;
        
        //Mirroring
        if (move&lt;0) {
            global.playermirrored = -1
         }
        if (move&gt;0) {
            global.playermirrored = 1
        }
        
        if (place_meeting(x,y+1,obj_plateforme))
        {  
            if (!up_off &amp;&amp; key_jump ){
            vsp = -(global.jumpspeed+jump_bonus);
            up_off=true
            }
        }
        
        if (vsp &lt; 0) &amp;&amp; (!key_jump){
            vsp = max(vsp,0)
        }
    }
        
    
    
    //Horizontal Collision
    if (place_meeting(x+hsp,y,obj_plateforme))
    {
        while(!place_meeting(x+sign(hsp),y,obj_plateforme)){
            x += sign(hsp);
        }
        hsp = 0;
    }
    x += hsp;  
    //Vertical Collision
    if (place_meeting(x,y+vsp,obj_plateforme))
    {
        while(!place_meeting(x,y+sign(vsp),obj_plateforme)){
            y += sign(vsp);
        }
        vsp = 0;
    }
    y += vsp;
}

//Animate
/*
if (place_meeting(x,y+1,obj_plateforme)){
    if (move !=0) chara.sprite_index = sp_chara_run; else chara.sprite_index = sp_chara_idle;
}
else{
if (vsp &lt; 0) chara.sprite_index = sp_chara_jump ; else chara.sprite_index = sp_chara_fall

}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprint/Dash
sol = place_meeting(x,y+1,obj_plateforme)

if(input_locked=false){

    //Si A enfoncé et si player sur sol, augmente la vitesse de deplacement
//    if (gamepad_button_check_pressed(0,gp_face2)) key_A_p =true;
    key_A_p = keyboard_check_pressed(ord("A"));
    
    //key_A est a la fois un checker et un compteur, !=0 -&gt; bonusvitesse 
    if (key_A!=0 || gamepad_button_check_pressed(0,gp_face2) )key_A+=1;
    if (key_A_p) key_A=1;
    
    if (key_A!=0 &amp;&amp; sol){spd_bonus=4;jump_bonus=4}
    if (key_A!=0 &amp;&amp; !sol){spd_bonus=0;jump_bonus=4}
    if (key_A=0){spd_bonus=0;jump_bonus=0}
    
    //si on relache A:
    if(keyboard_check_released(ord("A")) || (gamepad_button_check_released(0,gp_face2))){
        if(key_A&lt;20){ //Dash
        dash=1
        key_A =0;
        }
        else key_A =0;
    }

}

//dash

if(dash&gt;0){
    spd_bonus=50;
    input_locked=true;
    dash+=1
    if(global.playermirrored=1){
    hsp = global.movespeed+spd_bonus
    }
    if(global.playermirrored=-1){
    hsp = -(global.movespeed+spd_bonus)
    }
}
if(dash&gt;dash_duration) {
    dash=0; 
    spd_bonus=0;
    input_locked=false;   
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Accrochage


//si en l'air et au contact
if (place_meeting(x+global.playermirrored,y,obj_plateforme)) &amp;&amp; (!place_meeting(x,y+vsp,obj_plateforme)){
    //recupere l'id de l'obj
    id_p = instance_place(x+global.playermirrored , y, obj_plateforme);
    //recupere la position de l'obj
    id_x= id_p.x
    //calcule la position des points d'accroche
    x_1 = id_p.x ;
    y_1 = id_p.y;
    x_2 = id_p.x+id_p.sprite_width;
    y_2 = id_p.y;
    //verifie la proximité des points d'accroche
    if( abs( (x+sprite_width/2)-x_1)&lt;10 &amp;&amp; abs((y-sprite_height)-y_1) &lt;40 ) { //si on est proche du point 1
        nicolnigrav=true
        x=x_1-sprite_width/2;
        y=y_1+sprite_height;
        accrochage=true;
        snap=1;
    }
    else if( abs((x-sprite_width/2)-x_2)&lt;10 &amp;&amp; abs((y-sprite_height)-y_2) &lt;40 ){ //si proche point 2
        nicolnigrav=true
        x=x_2+sprite_width/2;
        y=y_2+sprite_height;
        accrochage=true;
        snap=2
    }
}

if ( !up_off &amp;&amp; accrochage &amp;&amp; (gamepad_button_check_pressed(0,gp_face1)|| keyboard_check(ord("Z")) )){
    if(snap=1){
    y=y_1-1
    x=x_1+sprite_width/2
    }
    if(snap=2){
    y=y_2-1
    x=x_2-sprite_width/2
    }
    accrochage=false;
    nicolnigrav=false;
    up_off=true;
    
}

/*    
for (i=0;i&lt;50;i+=1){
    if (!position_meeting(x+global.playermirrored,y-i,obj_plateforme)){
        accrochage=true;
        vsp=0
        hsp=0
        y-=i+20
        //x+=16*global.playermirrored;
        break;
    }
}
*/

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///debug

draw_self();
/*
draw_text(x,y,global.playermirrored);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
