<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sp_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialisation des variables

//Variables globales qui peuvent etre influencer par l'equipement
global.grav = 0.3;
global.jumpspeed = 11;
global.movespeed = 7;

//image_alpha = 0.0005;
    global.playermirrored = 1
    
hsp = 0;
vsp = 0;

key_down = 0;

//chara = instance_create(x,y,obj_chara);
//chara.animation = sp_chara;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Get the player's input
key_right = keyboard_check(ord("D"));
key_left = -keyboard_check(ord("Q"));
key_down = keyboard_check(ord("S"));
key_jump = keyboard_check(ord("Z"));


//React to inputs
move = key_left + key_right;
hsp = move*global.movespeed;
if (vsp &lt; 10) vsp += global.grav;

//Mirroring
if (move&lt;0) {
    global.playermirrored = -1
 }
if (move&gt;0) {
    global.playermirrored = 1
}

if (place_meeting(x,y+1,obj_plateforme))
{  
    if (key_jump ) vsp = -global.jumpspeed
}

//Horizontal Collision
if (place_meeting(x+hsp,y,obj_plateforme))
{
    while(!place_meeting(x+sign(hsp),y,obj_plateforme)){
        x += sign(hsp);
    }
    hsp = 0;
}
x += hsp;

//Vertical Collision
if (place_meeting(x,y+vsp,obj_plateforme))
{
    while(!place_meeting(x,y+sign(vsp),obj_plateforme)){
        y += sign(vsp);
    }
    vsp = 0;
}
y += vsp;


//Animate
/*
if (place_meeting(x,y+1,obj_plateforme)){
    if (move !=0) chara.sprite_index = sp_chara_run; else chara.sprite_index = sp_chara_idle;
}
else{
if (vsp &lt; 0) chara.sprite_index = sp_chara_jump ; else chara.sprite_index = sp_chara_fall

}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
